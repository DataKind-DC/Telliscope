labels <- sprintf(
"<strong>%s</strong><br/>%g US Dollars <sup></sup>",
trade_tbl_test$country_name, trade_tbl_test$total_trade) %>% lapply(htmltools::HTML)
#basemap
base_map <- leaflet(world_geojson) %>% addTiles() %>% addPolygons(stroke = FALSE)
#add polygons,labels and mouse over effect
base_map %>% addPolygons(
fillColor = ~pal(log0(trade_tbl_test$total_trade)),
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
world_geojson$id
world_geojson %>% arrange(id)
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
bla <- tibble(x = c(1,2,3,4,5), y = c(9,9,4,4,5))
blo <- tibble(ex = c(1,2,4,5))
bla %>% slice(match(bla$x, ex))
blo %>% slice(match(bla$x, ex))
blo <- tibble(ex = c(1,5,4,2), why = c(10,50,40,20))
blo %>% slice(match(bla$x, ex))
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
providers
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
ls
ls()
world_geojson <- geojsonio::geojson_read("~/Desktop/telliscope/ethiopian_imports_exports/world.geo.json-master/countries.geo.json", what = "sp")
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
world_geojson <- geojsonio::geojson_read("~/Desktop/telliscope/ethiopian_imports_exports/world.geo.json-master/countries.geo.json", what = "sp")
trade_tbl <- read_csv("~/Desktop/telliscope/import_export_clean.csv") %>%
filter(country_code %in% world_geojson$id)
ui <- fluidPage(
leafletOutput("mymap"),
sidebarPanel(
sliderInput("selected_year",
"Year:",
min = 2013,
max = 2017,
value = 2017,
sep = ""),
radioButtons("selected_trade_direction",
"Export or Import:",
c("Export" = "export",
"Import" = "import"))
)
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
tradeTblFiltered <- reactive({
trade_tbl %>%
filter(Year == selected_year, trade_direction == selected_trade_direction) %>%
slice(match(world_geojson$id, country_code))
})
trade_tbl_test <- tradeTblFiltered()
output$mymap <- renderLeaflet({
world_geojson <- world_geojson[world_geojson$id %in% trade_tbl_test$country_code, ]
#create color palette for choropleth
pal <- colorNumeric("Greens", domain = log0(trade_tbl_test$total_trade))
#create labels
labels <- sprintf(
"<strong>%s</strong><br/>%g US Dollars <sup></sup>",
trade_tbl_test$country_name, trade_tbl_test$total_trade) %>% lapply(htmltools::HTML)
#basemap
base_map <- leaflet(world_geojson) %>% addTiles() %>% addPolygons(stroke = FALSE)
#add polygons,labels and mouse over effect
base_map %>% addPolygons(
fillColor = ~pal(log0(trade_tbl_test$total_trade)),
weight = 2,
opacity = 1,
color = 'white',
dashArray = '3',
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
})
}
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
quakes
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
trade_tbl %>% nrow
trade_tbl <- bind_rows(process_trade_data(import_data), process_trade_data(export_data))
import_data <- NULL
import_data <- import_data %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/import_2013.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/import_2014.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/import_2015.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/import_2016.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/import_2017.xlsx")) %>%
add_column(trade_direction = "import")
export_data <- NULL
export_data <- export_data %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/export_2013.xls")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/export_2014.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/export_2015.xls")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/export_2016.xlsx")) %>%
bind_rows(read_excel("~/Desktop/telliscope/Export and Import Data/export_2017.xlsx")) %>%
add_column(trade_direction = "export")
#import mapping btwn country names and ISO-3 compliant codes
iso_country_codes <- read_csv("https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/all/all.csv",
col_types = cols_only(`alpha-3` = col_guess(),
name = col_guess())) %>% rename(country_name = name, country_code = `alpha-3`)
for (i in 1:nrow(iso_country_codes)){
if (grepl("Ivoire",iso_country_codes$country_name[i])){
iso_country_codes$country_name[i] = "Cote d'Ivoire"
}
}
rename_columns <- function(tbl){
#This function changes the names of columns in the export and import data so they can be put into the
#same tibble
this_trade_direction <- unique(tbl$trade_direction)
stopifnot(length(this_trade_direction) == 1)
if (this_trade_direction == "export"){
tbl <- tbl %>% rename(country_name = Destination,
`Net Wt. (Kg)` = `Net.Wt. (Kg)`,
dollar_amount = `FOB Value (USD)`,
birr_amount = `FOB Value (ETB)`)
}
if (this_trade_direction == "import"){
tbl <- tbl %>% rename(country_name = `Country (Origin)`,
dollar_amount = `CIF Value (USD)`,
birr_amount = `CIF Value (ETB)`)
tbl <- tbl %>% select(-`Country (Consignment)`)
}
return(tbl)
}
fix_country_name <- function(country_name){
#INPUT: a country_name string
#OUTPUT: a country_name compatible with ISO-3 country names and codes
if (country_name == "United States"){return("United States of America")}
if (country_name == "Korea, Republic of"){return("Korea (Republic of)")}
if (country_name == "Democratic republic of the Congo"){return ("Congo (Democratic Republic of the)")}
if (country_name == "Iran, Islamic Republic of"){return("Iran (Islamic Republic of)")}
if (country_name == "United Kingdom"){return("United Kingdom of Great Britain and Northern Ireland")}
if (country_name == "Czech Republic"){return("Czechia")}
if (country_name == "Libyan Arab Jamahiriya"){return("Libya")}
if (country_name == "Korea, Democratic People's Rep. of"){return("Korea (Democratic People's Republic of)")}
if (country_name == "Swaziland"){return("Eswatini")}
if (country_name == "United Republic of Tanzania"){return("Tanzania, United Republic of")}
if (country_name == "Kazakstan"){return("Kazakhstan")}
if (country_name == "Venezuela"){return("Venezuela (Bolivarian Republic of)")}
if (country_name == "Palestine"){return("Palestine, State of")}
if (country_name == "United States Virgin Islands"){return("Virgin Islands (U.S.)")}
if (country_name == "Bolivia"){return("Bolivia (Plurinational State of)")}
if (country_name == "Cape Verde"){return("Cabo Verde")}
if (country_name == "Christmas Island[Australia]"){return("Christmas Island")}
if (country_name == "Republic of Moldova"){return("Moldova (Republic of)")}
if (country_name == "Reunion"){return("RÃ©union")}
if (country_name == "Serbia and Montenegro"){return("Serbia")} #yikes I just applied s and m to just s
if (country_name == "Yugoslavia"){return("Macedonia (the former Yugoslav Republic of)")}
if (country_name == "Zaire"){return("Congo (Democratic Republic of the)")}
if (country_name == "East Timor"){return("Timor-Leste")}
if (country_name == "Holy See (Vatican)"){return("Holy See")}
if (country_name == "The former Yugoslav Rep. Macedonia"){return("Macedonia (the former Yugoslav Republic of)")}
if (country_name == "Netherlands Antilles"){return("Netherlands")}
return(country_name)
}
fix_country_names <- function(tbl, country_col = "country_name"){
tbl <- tbl %>% filter(!is.na(country_name))
fixed_country_names <- sapply(tbl[country_col][[1]], fix_country_name)
tbl[country_col] <- fixed_country_names
return(tbl)
}
get_yearly_values_per_country <- function(tbl){
#INPUT: a tibble with individual trades as rows w. Year,
#OUTPUT: a tibble with countries as rows and their summed total trade amounts
summarised_tbl <- tbl %>%
group_by(Year, country_name, trade_direction) %>%
summarise(total_trade = sum(dollar_amount))
print(paste("TOTAL COuntryies: ", nrow(summarised_tbl)))
return (summarised_tbl)
}
add_missing_countries <- function(tbl){
#INPUT: tibble w/ a Year and country_code ccolumn
#OUTPUT: tibble w/ a row for each missing country.
print(paste("STARTING SIZE:", nrow(tbl)))
tbl_with_missing_countries_added <- NULL #start w/empty and add empty countries every year
for (y in unique(tbl$Year)){
tbl_1_year <- tbl %>% filter(Year == y) #get tbl for this year
print(paste(y, "SIZE:", (unique(tbl_1_year$Year))))
missing_countries <-
iso_country_codes[
which(iso_country_codes$country_name %in% setdiff(iso_country_codes$country_name,tbl_1_year$country_name)),] %>%
add_column(total_trade = 0, Year = unique(tbl_1_year$Year), trade_direction = unique(tbl_1_year$trade_direction))
tbl_with_missing_countries_added <- tbl_with_missing_countries_added %>% bind_rows(tbl_1_year,missing_countries)
}
tbl_with_missing_countries_added
}
add_country_codes <- function(tbl){
#INPUT: a tibble with a column country_col
#OUTPUT: a tibble with a new column called country_code
country_code <- sapply(tbl$country_name,
function(name){
(iso_country_codes %>%filter(country_name == name) %>% pull(country_code))[1]})
tbl["country_code"] = country_code
return(tbl)
}
process_trade_data <- function(trade_tbl){
#INPUT: export or import trade data
#OUPUT: processed data ready for choropleth went thru all above steps
trade_tbl <- trade_tbl %>%
rename_columns %>%
fix_country_names %>%
get_yearly_values_per_country %>%
add_missing_countries %>%
add_country_codes
trade_tbl
}
trade_tbl <- bind_rows(process_trade_data(import_data), process_trade_data(export_data))
trade_tbl <- read_csv("~/Desktop/telliscope/import_export_clean.csv")
trade_tbl %>% head
trade_tbl %>% group_by(country_name, trade_direction) %>% summarise(sum(total_trade))
trade_tbl %>% group_by(country_name, trade_direction) %>% summarise(sum(total_trade)) %>% filter(trade_direction=="import") -> five_year_imports
trade_tbl %>% group_by(country_name, trade_direction) %>% summarise(sum(total_trade)) %>% filter(trade_direction=="export") -> five_year_exports
five_year_exports %>% head
five_year_imports %>% head
five_year_imports$deficit <-  five_year_imports$`sum(total_trade)` - five_year_exports$`sum(total_trade)`
five_year_imports %>% arrange(deficit)
five_year_imports %>% arrange(desc(deficit))
five_year_imports %>% arrange(desc(deficit)) %>% View
sum(five_year_imports$deficit)
runApp('Desktop/telliscope/shiny_leaflet_test')
install.packages(rvest)
install.packages("rvest")
library(rvest)
bla <- read_html("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
bla
html_nodes(webpage, 'bla')
html_nodes(bla, 'bla')
bla1 <- html("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
bla <- read_html(https://stackoverflow.com/questions/49208192/how-to-upload-jupyter-notebooks-using-blogdown-on-netlify)
bla <- read_html("https://stackoverflow.com/questions/49208192/how-to-upload-jupyter-notebooks-using-blogdown-on-netlify")
bla
doc.html("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
install.packages(XML)
install.packages("XML")
doc.html("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
library(XML)
doc.html("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
htmlTreeParse("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
blo <- htmlTreeParse("http://video.google.com/timedtext?lang=en&v=lLWEXRAnQd0")
blo$children
blo$file
blo$version
grepl(blo$children, "<>")
?grepl
ggplot() +
\
layer(data=dabble, mapping=aes(x=fart, y=freq), geom="bar", )
ggplot(data=dabble, aes(x=fart, y=freq)) +
geom_bar()
library(ggplot2)
ggplot(data=dabble, aes(x=fart, y=freq)) +
geom_bar()
dabble <- tbl(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 5, 7, 3, 5))
ggplot(data=dabble, aes(x=fart, y=freq)) +
geom_bar()
dabble <- tbl(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 5, 7, 3, 5))
library(tibble)
dabble <- tbl(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 5, 7, 3, 5))
library(dplyr)
dabble <- tbl(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 5, 7, 3, 5))
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 5, 7, 3, 5))
ggplot(data=dabble, aes(x=fart, y=freq)) +
geom_bar()
ggplot(data=dabble, aes(x=fart)) +
geom_bar()
ggplot(data=dabble, aes(x=fart)) +
geom_bar(stat_identity())
ggplot(data=dabble, aes(x=fart, y=freq)) +
geom_bar(stat_identity())
ggplot(dabble, aes(fart)) +
geom_bar()
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy, silent'), freq=c(2, 5, 7, 3, 5))
ggplot(dabble, aes(fart)) +
geom_bar()
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy, silent'), freq=c(2, 5, 7, 3, 5))
ggplot(dabble, aes(fart)) +
geom_bar()
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy, silent'))
ggplot(dabble, aes(fart)) +
geom_bar()
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy', silent'))
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy', 'silent'))
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy', 'silent'))
ggplot(dabble, aes(fart)) +
geom_bar()
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy', 'silent'), freq=c(2, 7, 3, 5, 9))
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'assy', 'silent'), freq=c(2, 7, 3, 5, 9))
dabble <- tibble(fart=c('gassy', 'assy', 'classy', 'chunky', 'silent'), freq=c(2, 7, 3, 5, 9))
ot(dabble, aes(x=fart, y=freq)) +
geom_bar(stat='identity')
ggplot(dabble, aes(x=fart, y=freq)) +
geom_bar(stat='identity')
ggplot(dabble, aes(x=fart, y=freq)) +
geom_bar(stat='identity', colour=fart)
ggplot(dabble, aes(x=fart, y=freq)) +
geom_bar(stat='identity', aes(colour=fart))
ggplot(dabble, aes(x=fart, y=freq)) +
geom_bar(stat='identity', size=3, aes(colour=fart))
shiny::runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/test2')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
world_geojson
trade_tbl
trade_tbl %>% colnames
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
?quartz
quartz.options()[c("width", "height")]  # .)
quartz.options
quartz.options()
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
?leafletOutput
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
?fluidPanel
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
version
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Desktop/telliscope/ethiopian_imports_exports')
?leafletOutput
library(leaflet)
runApp('Desktop/telliscope/ethiopian_imports_exports')
install.packages("leaflet")
install.packages("leaflet")
shiny::runApp('Desktop/telliscope/ethiopian_imports_exports')
shiny::runApp('Desktop/telliscope/ethiopian_imports_exports')
shiny::runApp('Desktop/telliscope/ethiopian_imports_exports')
shiny::runApp('Desktop/telliscope/ethiopian_imports_exports')
source('~/Desktop/telliscope/choro_static.R')
source('~/Desktop/telliscope/choro_static.R')
runApp('Desktop/telliscope/ethiopian_imports_exports')
base_map
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/ethiopian_imports_exports')
runApp('Desktop/telliscope/ethiopian_imports_exports')
?quartz
?bootstrapPage
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
?absolutePanel
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
?bootstrapPage
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
?absolutePanel
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/shiny_leaflet_test')
runApp('Desktop/telliscope/ethiopian_imports_exports')
library('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo()
rsconnect::setAccountInfo
rsconnect::setAccountInfo(name='colorlace',
token='C7FC63C91657FCC25643F6F4F555EEEC',
secret='dWO/E7s9bzBug6BeNiYB8yviMg7b/OeG2NDR5ygT')
runApp('Desktop/telliscope/shiny_leaflet_test')
deployApp()
setwd("~/Desktop/telliscope/single_page_shiny_app/"s)
getwd()
setwd("~/Desktop/telliscope/single_page_shiny_app/")
deployApp()
runApp('~/Desktop/telliscope/shiny_leaflet_test')
runApp()
deployApp()
runApp()
runApp()
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
trade_tbl <- read_csv("~/Desktop/telliscope/import_export_clean.csv") %>%
filter(country_code %in% world_geojson$id)
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
quartz.options()[c("width", "height")]  # .)
log0 <- function(x){ifelse(x<=0,0,log(x))}
world_geojson <-geojsonio::geojson_read("world.geo.json-master/countries.geo.json", what = "sp")
world_geojson <- world_geojson[world_geojson$id %in% trade_tbl$country_code, ]
trade_tbl <- read_csv("~/Desktop/telliscope/import_export_clean.csv") %>%
filter(country_code %in% world_geojson$id)
selected_trade_tbl <- trade_tbl %>%
filter(Year == selected_year, trade_direction == selected_trade_direction) %>%
slice(match(world_geojson$id, country_code))
world_geojson <- world_geojson[world_geojson$id %in% trade_tbl$country_code, ]
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
selected_year = 2013
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
selected_trade_direction = "export"
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp('~/Desktop/telliscope/ethiopian_imports_exports')
runApp()
runApp()
deployApp()
